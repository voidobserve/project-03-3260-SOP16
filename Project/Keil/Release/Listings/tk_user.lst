C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TK_USER
OBJECT MODULE PLACED IN .\Release\Objects\tk_user.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\tk_user.c LARGE OPTIMIZE(9,SIZE) BROWSE INTVECTOR(0X000C) INC
                    -DIR(..\..\Libraries\Include;..\..\User;..\..\User\lib) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\tk_user.l
                    -st) OBJECT(.\Release\Objects\tk_user.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    User/tk_user.c
   4           * @author  HUGE-IC Application Team
   5           * @version V1.0.0
   6           * @date    05-20-2022
   7           * @brief   Main program body
   8           ******************************************************************************
   9           * @attention
  10           *
  11           * <h2><center>&copy; COPYRIGHT 2022 TAIXIN-IC</center></h2>
  12           *
  13           *
  14           *
  15           ******************************************************************************
  16           */
  17          
  18          /* Includes ------------------------------------------------------------------*/
  19          #include "include.h"
  20          #include "my_gpio.h"  // 自定义的、使用到的引脚
  21          #include "rf_recv.h"  // RF315解码和RF接收引脚相关的函数
  22          #include "send_key.h" // 发送键值的引脚和相关函数
  23          
  24          #include "rf_learn.h" // rf学习相关的函数
  25          
  26          #include "tmr2.h"
  27          #include "tmr3.h"
  28          #include "rf_scan.h" // 包含了长短按信息的定义
  29          
  30          #include "key_conversion.h" // 包含了触摸按键对应的键值
  31          
  32          #include "stimer0.h"
  33          
  34          /** @addtogroup Template_Project
  35           * @{
  36           */
  37          
  38          /* Private typedef -----------------------------------------------------------*/
  39          /* Private define ------------------------------------------------------------*/
  40          /* Private macro -------------------------------------------------------------*/
  41          /* Private variables ---------------------------------------------------------*/
  42          /* Private function prototypes -----------------------------------------------*/
  43          /* Private functions ---------------------------------------------------------*/
  44          
  45          /**
  46           * @brief  Touchkey  debug uart init function
  47           * @param  None
  48           * @retval None
  49           */
  50          xdata u16 led_data[1];                           // LED显示buff
  51          #define LED_DIS_FREQ (1000000 / 16 / 8 / 60 - 1) // 一个CON的显示时间60Hz    60-1=1M/(LED_COMCON*16*LED_TI
             -ME_CON)
  52          
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 2   

  53          unsigned int xdata display_data = 0;
  54          
  55          /**
  56           * @brief  调试接口IO初始化函数.
  57           * @param  None
  58           * @retval None
  59           */
  60          #if TK_DEBUG_EN
              void debug_gpio_config(void)
              {
              #if 1
                  P2_MD0 &= ~GPIO_P21_MODE_SEL(0x03);
                  P2_MD0 |= GPIO_P21_MODE_SEL(0x01);
                  FOUT_S21 = GPIO_FOUT_UART1_TX;
              #else
                  P2_MD1 &= ~GPIO_P27_MODE_SEL(0x03);
                  P2_MD1 |= GPIO_P27_MODE_SEL(0x01);
                  FOUT_S27 = GPIO_FOUT_UART1_TX;
              #endif
              }
              #endif
  74          
  75          #if 0
              /**
               * @brief  LED INIT FUNCTION
               * @param  None
               * @retval None
               */
              // 在开发板上：
              // P2_7连接到四个蓝色LED的负极的公共端
              // P0_3连接到LED1正极
              // P3_0连接到LED2正极
              // P1_0连接到LED3正极
              // P0_7连接到LED4正极
              void led_init(void)
              {
                  // 配置COM0   P27为输出模式
                  // P2_MD1，P2的工作模式寄存器1
                  P2_MD1 &= ~GPIO_P27_MODE_SEL(0x3); // 清零P2_MD1寄存器的6-7位
                  P2_MD1 |= GPIO_P27_MODE_SEL(0x1);  // P2_MD1的6~7位设置为0x01，这样会将P2的第7个IO设置为输出模式
              
                  // 配置IO的驱动能力
                  // P2的第7个IO的驱动电流为8mA
                  P2_DRV7 = GPIO_P27_DRV_SEL(0x1);
              
                  // 配置SEG0-SEG4 P03\P30\P10\P07-输出模式
                  // P0_3、P3_0、P1_0和P0_1配置为输出模式
                  // 下面是先清零，再置位的操作
                  P0_MD0 &= ~GPIO_P03_MODE_SEL(0x3);
                  P3_MD0 &= ~GPIO_P30_MODE_SEL(0x3);
                  P1_MD0 &= ~GPIO_P10_MODE_SEL(0x3);
                  P0_MD1 &= ~GPIO_P07_MODE_SEL(0x3);
              
                  P0_MD0 |= GPIO_P03_MODE_SEL(0x1);
                  P3_MD0 |= GPIO_P30_MODE_SEL(0x1);
                  P1_MD0 |= GPIO_P10_MODE_SEL(0x1);
                  P0_MD1 |= GPIO_P07_MODE_SEL(0x1);
              
                  // SEG0-SEG4 P03\P30\P10\P07
                  // 配置P0_3、P3_0、P1_0和P0_1的输出功能，驱动LED（应该是连接到了片上外设LED模块，这个模块是个控制器）
                  FOUT_S03 = GPIO_FOUT_LED_SEG0;
                  FOUT_S30 = GPIO_FOUT_LED_SEG1;
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 3   

                  FOUT_S10 = GPIO_FOUT_LED_SEG2;
                  FOUT_S07 = GPIO_FOUT_LED_SEG3;
              
                  // 配置P0_3、P3_0、P1_0和P0_1的输出电流，8mA
                  P0_DRV3 = GPIO_P03_DRV_SEL(0x1);
                  P3_DRV0 = GPIO_P30_DRV_SEL(0x1);
                  P1_DRV0 = GPIO_P10_DRV_SEL(0x1);
                  P0_DRV7 = GPIO_P07_DRV_SEL(0x1);
              
                  // COM0 P27
                  // 配置P2_7的输出功能，连接到LED的公共端0
                  FOUT_S27 = GPIO_FOUT_LED_COM0;
              
                  CLK_CON2 |= CLK_LED_EN(0x1); // 打开LED模块的时钟（打开片上外设LED模块的时钟）
              
                  // 0x55表示允许访问和设置 wdt_psr（在WDT_CON中，psr表示看门狗定时时间）
                  WDT_KEY = 0x55;                // 操作IO_MAP寄存器需要写KEY
                  IO_MAP |= MAP_LED_DMA_EN(0x1); // LED DMA使能
                  WDT_KEY = 0xBB;                // 写入一个错误的数值，恢复该寄存器的写保护
              
                  // 打开LED模块的时钟
                  CLK_CON2 |= 0x10;
              
                  LED_SEGCONL = LED_SEG0_EN(0x1) | // SEG0 使能
                                LED_SEG1_EN(0x1) | // SEG0 使能
                                LED_SEG2_EN(0x1) | // SEG0 使能
                                LED_SEG3_EN(0x1);  // SEG0 使能
                  LED_COMCON = LED_COM0_EN(0x1);   // COM1 使能
              
                  LED_DMAADRH = LED_DMA_ADDR_H((((u16)led_data) >> 8) & 0xFF); // LED数据储存首地址的高8位
                  LED_DMAADRL = LED_DMA_ADDR_L((((u16)led_data) >> 0) & 0xFF); // LED数据储存首地址的低8位
                  LED_TIMECON = LED_SCAN_TIME(LED_DIS_FREQ);                   // 扫描到某个com或seg时点亮的时间,步长为3
             -2微秒
                  LED_CON = LED_COM_SEG_SEL(0x0) |                             // 扫描方式选择com扫描
                            LED_EN(0x1);                                       // LED使能,使能之后从DMAADDRH和DMAADDRL的
             -地址开始拿数据扫描点亮,用户将数据写到对应的地址即可
              
                  led_data[0] = 0x00000f00; // 一开始让四个LED全部点亮
                  // led_data[0] = 0x00000000; // 一开始让四个LED全部熄灭
              }
              #endif
 154          
 155          #if USE_MY_DEBUG
              extern void uart1_config(void);
              #endif // #if USE_MY_DEBUG
 158          
 159          /**
 160           * @brief  用户代码初始化函数接口.
 161           * @param  None
 162           * @retval None
 163           */
 164          void user_init(void)
 165          {
 166   1          // led_init(); // 初始化LED相关的引脚
 167   1      
 168   1          rfin_init(); // RF315接收引脚初始化，这里也初始化了tmr0
 169   1      
 170   1          // p12_output_config(); // 测试用，P12初始化，配置为输出模式
 171   1      
 172   1          send_keyval_pin_init();   // 初始化键值的发送引脚
 173   1          send_keyval_timer_init(); // 初始化发送键值的引脚所使用到的定时器，定时器默认关闭
 174   1      
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 4   

 175   1          tmr0_enable(); // 打开采集RF信号的定时器
 176   1          // tmr1_enable(); // 打开发送键值的引脚所使用到的定时器，测试用，看看定时器中断是否按配置的时间触发
 177   1      
 178   1          tmr2_config(); // 上电5s内的"学习"所使用的定时器
 179   1          tmr3_config(); // 配置定时器，每10ms产生一次中断，对应的计数值+1，用来判断按键的短按、长按和持续
 180   1          tmr4_config(); // 打开识别遥控器双击所需要的定时器
 181   1      
 182   1          stimer0_config(); // 1ms定时器
 183   1      
 184   1          // p01_output_config(); // 开发板LED6对应的引脚初始化
 185   1          // p26_output_config(); // 开发板LED7对应的引脚初始化
 186   1      
 187   1      #if USE_MY_DEBUG
                  uart1_config();
              #endif //     #if USE_MY_DEBUG
 190   1      }
 191          
 192          // void led_display(void)
 193          // {
 194          // led_data[0] = display_data;
 195          // }
 196          
 197          #ifdef DEVELOPMENT_BOARD // 开发板上对应额触摸按键函数接口
              /**
               * @brief  用户代码循环执行函数接口.（触摸按键扫描函数接口）
               * @param  None
               * @retval None
               */
              void user_handle(void)
              {
                  volatile unsigned long int KeyOnOutput = __tk_key_flag; // __tk_key_flag单次按键标志
              
                  static volatile unsigned long int KeyOld = 0; // 用于存放长按时，对应的按键
              
                  // 是否长按的标志，0--否，1--是
                  // 需要保存长按的状态，表示定时器一直在发送键值
                  static unsigned char long_touch_flag = 0; // 上一次扫描到的按键是否为长按的标志
              
                  static volatile u32 cnt = 0; // 长按计数值
              
                  u32 i = 0; // 循环计数值
              
                  u16 send_data = 0; // 要发送的带有键值的数据
              
                  if (KeyOnOutput && 0 == long_touch_flag && cnt < TK_LONG_KEY_TIME) // 如果有按键按下（并且之前扫描到的
             -不是长按）
                  {
                      // 通过循环判断是否为长按
                      for (i = 0; i < 500000; i++) // 实际上用不到这么大的数字，到了设定的长按时间就会退出
                      {
                          // 按键扫描函数，使用了库里面的接口（闭源库）
                          // 这个函数会更新__tk_key_flag的值
                          delay_ms(10);
                          __tk_scan();
              
                          if (KeyOnOutput == __tk_key_flag)
                          {
                              // 如果按键键值一致，说明按键一直被按下，未松开
                              cnt++;
                          }
                          else
                          {
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 5   

                              // 如果按键键值不一致或是松开了按键
                              // cnt = 0;
                              break;
                          }
                          if (cnt > TK_LONG_KEY_TIME) // 如果长按超过了这里设置的时间
                          {
                              long_touch_flag = 1; // 标记为长按
                              break;
                          }
                      }
              
                      if (cnt > TK_LONG_KEY_TIME)
                      {
                          long_touch_flag = 1; // 标记为长按
                      }
                      else
                      {
                          // 如果是短按
                          cnt = 0; // 清除长按的计数值
              
                          // 判断当前触摸的键值，做对应的操作
                          if (TK_CH0_VALIB == KeyOnOutput)
                          {
                              // 如果开发板的TK1被触摸
                              display_data ^= 0x0100; // 对应的LED状态取反，后面会调用led_display()刷新
                              for (i = 0; i < 300; i++)
                              {
                                  delay_ms(1);
                                  __tk_scan();
                                  KeyOnOutput = __tk_key_flag;
              
                                  if (TK_CH0_VALIB == KeyOnOutput)
                                  {
                                      // 如果检测到是同一个按键按下，说明是双击
                                      // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
                                      while (0 != KeyOnOutput)
                                      {
                                          __tk_scan();
                                          KeyOnOutput = __tk_key_flag;
                                      }
              
                                      send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK1);
                                      return;
                                  }
                              }
              
                              // 如果不是同一个按键按下或是没有值，说明是短按
                              send_status_keyval(KEY_PRESS_SHORT, KEY_TK1); // 发送带有状态的键值
                          }
                          else if (TK_CH4_VALIB == KeyOnOutput)
                          {
                              // 如果开发板的TK2被触摸
                              display_data ^= 0x0200; // 对应的LED状态取反，后面会调用led_display()刷新
                              for (i = 0; i < 300; i++)
                              {
                                  delay_ms(1);
                                  __tk_scan();
                                  KeyOnOutput = __tk_key_flag;
              
                                  if (TK_CH4_VALIB == KeyOnOutput)
                                  {
                                      // 如果检测到是同一个按键按下，说明是双击
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 6   

                                      // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
                                      while (0 != KeyOnOutput)
                                      {
                                          __tk_scan();
                                          KeyOnOutput = __tk_key_flag;
                                      }
              
                                      send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK2);
                                      return;
                                  }
                              }
              
                              // 如果不是同一个按键按下或是没有值，说明是短按
                              send_status_keyval(KEY_PRESS_SHORT, KEY_TK2); // 发送带有状态的键值
                          }
                          else if (TK_CH5_VALIB == KeyOnOutput)
                          {
                              // 如果开发板的TK3被触摸
                              display_data ^= 0x0400; // 对应的LED状态取反，后面会调用led_display()刷新
                              for (i = 0; i < 300; i++)
                              {
                                  delay_ms(1);
                                  __tk_scan();
                                  KeyOnOutput = __tk_key_flag;
              
                                  if (TK_CH5_VALIB == KeyOnOutput)
                                  {
                                      // 如果检测到是同一个按键按下，说明是双击
                                      // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
                                      while (0 != KeyOnOutput)
                                      {
                                          __tk_scan();
                                          KeyOnOutput = __tk_key_flag;
                                      }
              
                                      send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK3);
                                      return;
                                  }
                              }
              
                              // 如果不是同一个按键按下或是没有值，说明是短按
                              send_status_keyval(KEY_PRESS_SHORT, KEY_TK3); // 发送带有状态的键值
                          }
                          else if (TK_CH6_VALIB == KeyOnOutput)
                          {
                              // 如果开发板的TK4被触摸
                              display_data ^= 0x0800; // 对应的LED状态取反，后面会调用led_display()刷新
                              for (i = 0; i < 300; i++)
                              {
                                  delay_ms(1);
                                  __tk_scan();
                                  KeyOnOutput = __tk_key_flag;
              
                                  if (TK_CH6_VALIB == KeyOnOutput)
                                  {
                                      // 如果检测到是同一个按键按下，说明是双击
                                      // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
                                      while (0 != KeyOnOutput)
                                      {
                                          __tk_scan();
                                          KeyOnOutput = __tk_key_flag;
                                      }
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 7   

              
                                      send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK4);
                                      return;
                                  }
                              }
              
                              // 如果不是同一个按键按下或是没有值，说明是短按
                              send_status_keyval(KEY_PRESS_SHORT, KEY_TK4); // 发送带有状态的键值
                          }
                      }
                  }
              
                  if (1 == long_touch_flag && 0 != KeyOnOutput)
                  {
                      KeyOld = KeyOnOutput;
              
                      // 如果之前是长按，现在还未松开
                      // 判断当前触摸的键值，做对应的操作
                      if (TK_CH0_VALIB == KeyOnOutput)
                      {
                          // 如果开发板的TK1被触摸
                          if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
                          {
                              display_data ^= 0x0100; // 对应的LED状态取反，后面会调用led_display()刷新
                              led_display();          // LED状态更新显示
                              send_status_keyval(KEY_PRESS_LONG, KEY_TK1);
                          }
              
                          // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
                          while (0 != KeyOnOutput)
                          {
                              delay_ms(10);
                              cnt++;
                              __tk_scan();
                              KeyOnOutput = __tk_key_flag;
              
                              if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
                              {
                                  cnt = TK_LONG_KEY_TIME;
                                  send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK1);
                              }
                          }
              
                          // display_data ^= 0x0100; // 对应的LED状态取反，后面会调用led_display()刷新
                          // led_display();          // LED状态更新显示
                      }
                      else if (TK_CH4_VALIB == KeyOnOutput)
                      {
                          // 如果开发板的TK2被触摸
                          if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
                          {
                              display_data ^= 0x0200; // 对应的LED状态取反，后面会调用led_display()刷新
                              led_display();          // LED状态更新显示
                              send_status_keyval(KEY_PRESS_LONG, KEY_TK2);
                          }
              
                          // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
                          while (0 != KeyOnOutput)
                          {
                              delay_ms(10);
                              cnt++;
                              __tk_scan();
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 8   

                              KeyOnOutput = __tk_key_flag;
              
                              if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
                              {
                                  cnt = TK_LONG_KEY_TIME;
                                  send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK2);
                              }
                          }
              
                          // display_data ^= 0x0200; // 对应的LED状态取反，后面会调用led_display()刷新
                          // led_display();          // LED状态更新显示
                      }
                      else if (TK_CH5_VALIB == KeyOnOutput)
                      {
                          // 如果开发板的TK3被触摸
                          if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
                          {
                              display_data ^= 0x0400; // 对应的LED状态取反，后面会调用led_display()刷新
                              led_display();          // LED状态更新显示
                              send_status_keyval(KEY_PRESS_LONG, KEY_TK3);
                          }
              
                          // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
                          while (0 != KeyOnOutput)
                          {
                              delay_ms(10);
                              cnt++;
                              __tk_scan();
                              KeyOnOutput = __tk_key_flag;
              
                              if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
                              {
                                  cnt = TK_LONG_KEY_TIME;
                                  send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK3);
                              }
                          }
              
                          // display_data ^= 0x0400; // 对应的LED状态取反，后面会调用led_display()刷新
                          // led_display();          // LED状态更新显示
                      }
                      else if (TK_CH6_VALIB == KeyOnOutput)
                      {
                          // 如果开发板的TK4被触摸
                          if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
                          {
                              display_data ^= 0x0800; // 对应的LED状态取反，后面会调用led_display()刷新
                              led_display();          // LED状态更新显示
                              send_status_keyval(KEY_PRESS_LONG, KEY_TK4);
                          }
              
                          // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
                          while (0 != KeyOnOutput)
                          {
                              delay_ms(10);
                              cnt++;
                              __tk_scan();
                              KeyOnOutput = __tk_key_flag;
              
                              if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
                              {
                                  cnt = TK_LONG_KEY_TIME;
                                  send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK4);
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 9   

                              }
                          }
              
                          // display_data ^= 0x0800; // 对应的LED状态取反，后面会调用led_display()刷新
                          // led_display();          // LED状态更新显示
                      }
                  }
                  else if (1 == long_touch_flag && 0 == KeyOnOutput)
                  {
                      // 如果之前是长按，现在却松开了按键
                      switch (KeyOld)
                      {
                      case TK_CH0_VALIB:
                          send_status_keyval(KEY_PRESS_LOOSE, KEY_TK1);
                          break;
              
                      case TK_CH4_VALIB:
                          send_status_keyval(KEY_PRESS_LOOSE, KEY_TK2);
                          break;
              
                      case TK_CH5_VALIB:
                          send_status_keyval(KEY_PRESS_LOOSE, KEY_TK3);
                          break;
              
                      case TK_CH6_VALIB:
                          send_status_keyval(KEY_PRESS_LOOSE, KEY_TK4);
                          break;
                      }
              
                      long_touch_flag = 0; // 清除标志位
                      cnt = 0;
                      KeyOld = 0;
                  }
              
              #if 0
                  if (1 == __tk_long_key_flag) // 如果长按按键（这个功能测试发现不行，不能用）
                  {
                      __tk_long_key_flag = 0;
              
                      // 这里可以自己处理，添加自己需要的功能
              
                      P11 = 0;
                  }
              #endif
              
                  led_display(); // LED状态更新显示
              }
              #endif // end ifdef DEVELOPMENT_BOARD
 532          
 533          #ifdef CIRCUIT_BOARD // 目标电路板对应的触摸按键函数接口
 534          /**
 535           * @brief  用户代码循环执行函数接口.（触摸按键扫描函数接口）
 536           * @param  None
 537           * @retval None
 538           */
 539          
 540          #define send_sp (100)
 541          void user_handle(void)
 542          {
 543   1          volatile unsigned long int KeyOnOutput = __tk_key_flag; // __tk_key_flag单次按键标志
 544   1      
 545   1          static volatile unsigned long int KeyOld = 0; // 用于存放长按时，对应的按键
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 10  

 546   1      
 547   1          // 是否长按的标志，0--否，1--是
 548   1          // 需要保存长按的状态，表示定时器一直在发送键值
 549   1          static unsigned char long_touch_flag = 0; // 上一次扫描到的按键是否为长按的标志
 550   1      
 551   1          static volatile u32 cnt = 0; // 长按计数值
 552   1      
 553   1          u32 i = 0; // 循环计数值
 554   1      
 555   1          u16 send_data = 0; // 要发送的带有键值的数据
 556   1      
 557   1          if (0 != __tk_key_flag)
 558   1          {   
 559   2              // 有按键按下，清零触摸按键模块初始化的倒计时
 560   2              touch_cnt_down_clear();
 561   2          }
 562   1      
 563   1      
 564   1          if (KeyOnOutput && 0 == long_touch_flag && cnt < TK_LONG_KEY_TIME) // 如果有按键按下（并且之前扫描到的
             -不是长按）
 565   1          {
 566   2              // 通过循环判断是否为长按
 567   2              for (i = 0; i < 500000; i++) // 实际上用不到这么大的数字，到了设定的长按时间就会退出
 568   2              {
 569   3                  // 按键扫描函数，使用了库里面的接口（闭源库）
 570   3                  // 这个函数会更新__tk_key_flag的值
 571   3                  delay_ms(10);
 572   3                  __tk_scan();
 573   3      
 574   3                  if (KeyOnOutput == __tk_key_flag)
 575   3                  {
 576   4                      // 如果按键键值一致，说明按键一直被按下，未松开
 577   4                      cnt++;
 578   4                  }
 579   3                  else
 580   3                  {
 581   4                      // 如果按键键值不一致或是松开了按键
 582   4                      // cnt = 0;
 583   4                      break;
 584   4                  }
 585   3                  if (cnt > TK_LONG_KEY_TIME) // 如果长按超过了这里设置的时间
 586   3                  {
 587   4                      long_touch_flag = 1; // 标记为长按
 588   4                      break;
 589   4                  }
 590   3              }
 591   2      
 592   2              if (cnt > TK_LONG_KEY_TIME)
 593   2              {
 594   3                  long_touch_flag = 1; // 标记为长按
 595   3              }
 596   2              else
 597   2              {
 598   3                  // 如果是短按
 599   3                  cnt = 0; // 清除长按的计数值
 600   3      
 601   3                  // 判断当前触摸的键值，做对应的操作
 602   3                  if (TK_CH24_VALIB == KeyOnOutput)
 603   3                  {
 604   4                      // 如果KEY1被触摸
 605   4                      for (i = 0; i < send_sp; i++)
 606   4                      {
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 11  

 607   5                          delay_ms(1);
 608   5                          __tk_scan();
 609   5                          KeyOnOutput = __tk_key_flag;
 610   5      
 611   5                          if (TK_CH24_VALIB == KeyOnOutput)
 612   5                          {
 613   6                              // 如果检测到是同一个按键按下，说明是双击
 614   6                              // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
 615   6                              while (0 != KeyOnOutput)
 616   6                              {
 617   7                                  WDT_KEY = WDT_KEY_VAL(0xAA);
 618   7                                  touch_cnt_down_clear(); // 清零触摸按键模块初始化的倒计时
 619   7                                  __tk_scan();
 620   7                                  KeyOnOutput = __tk_key_flag;
 621   7                              }
 622   6      
 623   6                              send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK1);
 624   6      
 625   6      #if USE_MY_DEBUG
                                      printf("K1 double press\n");
              #endif
 628   6                              return;
 629   6                          }
 630   5                      }
 631   4      
 632   4                      // 如果不是同一个按键按下或是没有值，说明是短按
 633   4                      send_status_keyval(KEY_PRESS_SHORT, KEY_TK1); // 发送带有状态的键值
 634   4      #if USE_MY_DEBUG
                              printf("K1 press\n");
              #endif
 637   4                  }
 638   3                  else if (TK_CH3_VALIB == KeyOnOutput)
 639   3                  {
 640   4                      // 如果KEY2被触摸
 641   4                      for (i = 0; i < send_sp; i++)
 642   4                      {
 643   5                          delay_ms(1);
 644   5                          __tk_scan();
 645   5                          KeyOnOutput = __tk_key_flag;
 646   5      
 647   5                          if (TK_CH3_VALIB == KeyOnOutput)
 648   5                          {
 649   6                              // 如果检测到是同一个按键按下，说明是双击
 650   6                              // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
 651   6                              while (0 != KeyOnOutput)
 652   6                              {
 653   7                                  WDT_KEY = WDT_KEY_VAL(0xAA);
 654   7                                  touch_cnt_down_clear(); // 清零触摸按键模块初始化的倒计时
 655   7                                  __tk_scan();
 656   7                                  KeyOnOutput = __tk_key_flag;
 657   7                              }
 658   6      
 659   6                              send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK2);
 660   6      #if USE_MY_DEBUG
                                      printf("K2 double press\n");
              #endif
 663   6                              return;
 664   6                          }
 665   5                      }
 666   4      
 667   4                      // 如果不是同一个按键按下或是没有值，说明是短按
 668   4                      send_status_keyval(KEY_PRESS_SHORT, KEY_TK2); // 发送带有状态的键值
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 12  

 669   4      #if USE_MY_DEBUG
                              printf("K2 press\n");
              #endif
 672   4                  }
 673   3                  else if (TK_CH2_VALIB == KeyOnOutput)
 674   3                  {
 675   4                      // 如果KEY3被触摸
 676   4                      for (i = 0; i < send_sp; i++)
 677   4                      {
 678   5                          delay_ms(1);
 679   5                          __tk_scan();
 680   5                          KeyOnOutput = __tk_key_flag;
 681   5      
 682   5                          if (TK_CH2_VALIB == KeyOnOutput)
 683   5                          {
 684   6                              // 如果检测到是同一个按键按下，说明是双击
 685   6                              // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
 686   6                              while (0 != KeyOnOutput)
 687   6                              {
 688   7                                  WDT_KEY = WDT_KEY_VAL(0xAA);
 689   7                                  touch_cnt_down_clear(); // 清零触摸按键模块初始化的倒计时
 690   7                                  __tk_scan();
 691   7                                  KeyOnOutput = __tk_key_flag;
 692   7                              }
 693   6      
 694   6                              send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK3);
 695   6      #if USE_MY_DEBUG
                                      printf("K3 double press\n");
              #endif
 698   6                              return;
 699   6                          }
 700   5                      }
 701   4      
 702   4                      // 如果不是同一个按键按下或是没有值，说明是短按
 703   4                      send_status_keyval(KEY_PRESS_SHORT, KEY_TK3); // 发送带有状态的键值
 704   4      #if USE_MY_DEBUG
                              printf("K3 press\n");
              #endif
 707   4                  }
 708   3                  else if (TK_CH0_VALIB == KeyOnOutput)
 709   3                  {
 710   4                      // 如果KEY4被触摸
 711   4                      for (i = 0; i < send_sp; i++)
 712   4                      {
 713   5                          delay_ms(1);
 714   5                          __tk_scan();
 715   5                          KeyOnOutput = __tk_key_flag;
 716   5      
 717   5                          if (TK_CH0_VALIB == KeyOnOutput)
 718   5                          {
 719   6                              // 如果检测到是同一个按键按下，说明是双击
 720   6                              // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
 721   6                              while (0 != KeyOnOutput)
 722   6                              {
 723   7                                  WDT_KEY = WDT_KEY_VAL(0xAA);
 724   7                                  touch_cnt_down_clear(); // 清零触摸按键模块初始化的倒计时
 725   7                                  __tk_scan();
 726   7                                  KeyOnOutput = __tk_key_flag;
 727   7                              }
 728   6      
 729   6                              send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK4);
 730   6      #if USE_MY_DEBUG
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 13  

                                      printf("K4 double press\n");
              #endif
 733   6                              return;
 734   6                          }
 735   5                      }
 736   4      
 737   4                      // 如果不是同一个按键按下或是没有值，说明是短按
 738   4                      send_status_keyval(KEY_PRESS_SHORT, KEY_TK4); // 发送带有状态的键值
 739   4      #if USE_MY_DEBUG
                              printf("K4 press\n");
              #endif
 742   4                  }
 743   3                  else if (TK_CH9_VALIB == KeyOnOutput)
 744   3                  {
 745   4                      // 如果KEY5被触摸
 746   4                      for (i = 0; i < send_sp; i++)
 747   4                      {
 748   5                          delay_ms(1);
 749   5                          __tk_scan();
 750   5                          KeyOnOutput = __tk_key_flag;
 751   5      
 752   5                          if (TK_CH9_VALIB == KeyOnOutput)
 753   5                          {
 754   6                              // 如果检测到是同一个按键按下，说明是双击
 755   6                              // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
 756   6                              while (0 != KeyOnOutput)
 757   6                              {
 758   7                                  WDT_KEY = WDT_KEY_VAL(0xAA);
 759   7                                  touch_cnt_down_clear(); // 清零触摸按键模块初始化的倒计时
 760   7                                  __tk_scan();
 761   7                                  KeyOnOutput = __tk_key_flag;
 762   7                              }
 763   6      
 764   6                              send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK5);
 765   6      #if USE_MY_DEBUG
                                      printf("K5 double press\n");
              #endif
 768   6                              return;
 769   6                          }
 770   5                      }
 771   4      
 772   4                      // 如果不是同一个按键按下或是没有值，说明是短按
 773   4                      send_status_keyval(KEY_PRESS_SHORT, KEY_TK5); // 发送带有状态的键值
 774   4      #if USE_MY_DEBUG
                              printf("K5 press\n");
              #endif
 777   4                  }
 778   3                  else if (TK_CH10_VALIB == KeyOnOutput)
 779   3                  {
 780   4                      // 如果KEY6被触摸
 781   4                      for (i = 0; i < send_sp; i++)
 782   4                      {
 783   5                          delay_ms(1);
 784   5                          __tk_scan();
 785   5                          KeyOnOutput = __tk_key_flag;
 786   5      
 787   5                          if (TK_CH10_VALIB == KeyOnOutput)
 788   5                          {
 789   6                              // 如果检测到是同一个按键按下，说明是双击
 790   6                              // 等待手指松开按键，不然发送完带有双击状态的键值后会再发送一次单击状态的键值
 791   6                              while (0 != KeyOnOutput)
 792   6                              {
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 14  

 793   7                                  WDT_KEY = WDT_KEY_VAL(0xAA);
 794   7                                  touch_cnt_down_clear(); // 清零触摸按键模块初始化的倒计时
 795   7                                  __tk_scan();
 796   7                                  KeyOnOutput = __tk_key_flag;
 797   7                              }
 798   6      
 799   6                              send_status_keyval(KEY_PRESS_DOUBLECLICK, KEY_TK6);
 800   6      #if USE_MY_DEBUG
                                      printf("K6 double press\n");
              #endif
 803   6                              return;
 804   6                          }
 805   5                      }
 806   4      
 807   4                      // 如果不是同一个按键按下或是没有值，说明是短按
 808   4                      send_status_keyval(KEY_PRESS_SHORT, KEY_TK6); // 发送带有状态的键值
 809   4      #if USE_MY_DEBUG
                              printf("K6 press\n");
              #endif
 812   4                  }
 813   3              }
 814   2          }
 815   1      
 816   1          if (1 == long_touch_flag && 0 != KeyOnOutput)
 817   1          {
 818   2              KeyOld = KeyOnOutput;
 819   2      
 820   2              // 如果之前是长按，现在还未松开
 821   2              // 判断当前触摸的键值，做对应的操作
 822   2              if (TK_CH24_VALIB == KeyOnOutput)
 823   2              {
 824   3                  // 如果KEY1被触摸
 825   3                  if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
 826   3                  {
 827   4                      send_status_keyval(KEY_PRESS_LONG, KEY_TK1);
 828   4      #if USE_MY_DEBUG
                              printf("K1 long\n");
              #endif
 831   4                  }
 832   3      
 833   3                  // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
 834   3                  while (0 != KeyOnOutput)
 835   3                  {
 836   4                      delay_ms(10);
 837   4                      cnt++;
 838   4                      __tk_scan();
 839   4                      KeyOnOutput = __tk_key_flag;
 840   4      
 841   4                      if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
 842   4                      {
 843   5                          cnt = TK_LONG_KEY_TIME;
 844   5                          send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK1);
 845   5      #if USE_MY_DEBUG
                                  printf("K1 hold\n");
              #endif
 848   5                      }
 849   4                  }
 850   3              }
 851   2              else if (TK_CH3_VALIB == KeyOnOutput)
 852   2              {
 853   3                  // 如果KEY2被触摸
 854   3                  if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 15  

 855   3                  {
 856   4                      send_status_keyval(KEY_PRESS_LONG, KEY_TK2);
 857   4      #if USE_MY_DEBUG
                              printf("K2 long\n");
              #endif
 860   4                  }
 861   3      
 862   3                  // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
 863   3                  while (0 != KeyOnOutput)
 864   3                  {
 865   4                      delay_ms(10);
 866   4                      cnt++;
 867   4                      __tk_scan();
 868   4                      KeyOnOutput = __tk_key_flag;
 869   4      
 870   4                      if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
 871   4                      {
 872   5                          cnt = TK_LONG_KEY_TIME;
 873   5                          send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK2);
 874   5      #if USE_MY_DEBUG
                                  printf("K2 hold\n");
              #endif
 877   5                      }
 878   4                  }
 879   3      
 880   3                  // display_data ^= 0x0200; // 对应的LED状态取反，后面会调用led_display()刷新
 881   3                  // led_display();          // LED状态更新显示
 882   3              }
 883   2              else if (TK_CH2_VALIB == KeyOnOutput)
 884   2              {
 885   3                  // 如果KEY3被触摸
 886   3                  if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
 887   3                  {
 888   4                      // display_data ^= 0x0400; // 对应的LED状态取反，后面会调用led_display()刷新
 889   4                      // led_display();          // LED状态更新显示
 890   4                      send_status_keyval(KEY_PRESS_LONG, KEY_TK3);
 891   4      #if USE_MY_DEBUG
                              printf("K3 long\n");
              #endif
 894   4                  }
 895   3      
 896   3                  // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
 897   3                  while (0 != KeyOnOutput)
 898   3                  {
 899   4                      delay_ms(10);
 900   4                      cnt++;
 901   4                      __tk_scan();
 902   4                      KeyOnOutput = __tk_key_flag;
 903   4      
 904   4                      if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
 905   4                      {
 906   5                          cnt = TK_LONG_KEY_TIME;
 907   5                          send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK3);
 908   5      #if USE_MY_DEBUG
                                  printf("K3 hold\n");
              #endif
 911   5                      }
 912   4                  }
 913   3      
 914   3                  // display_data ^= 0x0400; // 对应的LED状态取反，后面会调用led_display()刷新
 915   3                  // led_display();          // LED状态更新显示
 916   3              }
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 16  

 917   2              else if (TK_CH0_VALIB == KeyOnOutput)
 918   2              {
 919   3                  // 如果KEY4被触摸
 920   3                  if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
 921   3                  {
 922   4                      // display_data ^= 0x0800; // 对应的LED状态取反，后面会调用led_display()刷新
 923   4                      // led_display();          // LED状态更新显示
 924   4                      send_status_keyval(KEY_PRESS_LONG, KEY_TK4);
 925   4      #if USE_MY_DEBUG
                              printf("K4 long\n");
              #endif
 928   4                  }
 929   3      
 930   3                  // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
 931   3                  while (0 != KeyOnOutput)
 932   3                  {
 933   4                      delay_ms(10);
 934   4                      cnt++;
 935   4                      __tk_scan();
 936   4                      KeyOnOutput = __tk_key_flag;
 937   4      
 938   4                      if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
 939   4                      {
 940   5                          cnt = TK_LONG_KEY_TIME;
 941   5                          send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK4);
 942   5      #if USE_MY_DEBUG
                                  printf("K4 hold\n");
              #endif
 945   5                      }
 946   4                  }
 947   3      
 948   3                  // display_data ^= 0x0800; // 对应的LED状态取反，后面会调用led_display()刷新
 949   3                  // led_display();          // LED状态更新显示
 950   3              }
 951   2              else if (TK_CH9_VALIB == KeyOnOutput)
 952   2              {
 953   3                  // 如果KEY5被触摸
 954   3                  if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
 955   3                  {
 956   4                      // display_data ^= 0x0800; // 对应的LED状态取反，后面会调用led_display()刷新
 957   4                      // led_display();          // LED状态更新显示
 958   4                      send_status_keyval(KEY_PRESS_LONG, KEY_TK5);
 959   4      #if USE_MY_DEBUG
                              printf("K5 long\n");
              #endif
 962   4                  }
 963   3      
 964   3                  // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
 965   3                  while (0 != KeyOnOutput)
 966   3                  {
 967   4                      delay_ms(10);
 968   4                      cnt++;
 969   4                      __tk_scan();
 970   4                      KeyOnOutput = __tk_key_flag;
 971   4      
 972   4                      if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
 973   4                      {
 974   5                          cnt = TK_LONG_KEY_TIME;
 975   5                          send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK5);
 976   5      #if USE_MY_DEBUG
                                  printf("K5 hold\n");
              #endif
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 17  

 979   5                      }
 980   4                  }
 981   3      
 982   3                  // display_data ^= 0x0800; // 对应的LED状态取反，后面会调用led_display()刷新
 983   3                  // led_display();          // LED状态更新显示
 984   3              }
 985   2      
 986   2              else if (TK_CH10_VALIB == KeyOnOutput)
 987   2              {
 988   3                  // 如果KEY6被触摸
 989   3                  if (cnt >= TK_LONG_KEY_TIME && cnt < 90)
 990   3                  {
 991   4                      // display_data ^= 0x0800; // 对应的LED状态取反，后面会调用led_display()刷新
 992   4                      // led_display();          // LED状态更新显示
 993   4                      send_status_keyval(KEY_PRESS_LONG, KEY_TK6);
 994   4      #if USE_MY_DEBUG
                              printf("K6 long\n");
              #endif
 997   4                  }
 998   3      
 999   3                  // 若还不松开手，则每隔150ms发送一次带有持续状态信息的键值信号
1000   3                  while (0 != KeyOnOutput)
1001   3                  {
1002   4                      delay_ms(10);
1003   4                      cnt++;
1004   4                      __tk_scan();
1005   4                      KeyOnOutput = __tk_key_flag;
1006   4      
1007   4                      if (cnt >= 87) // 原本是填90的，但是软件延时有误差，这里只能慢慢调试
1008   4                      {
1009   5                          cnt = TK_LONG_KEY_TIME;
1010   5                          send_status_keyval(KEY_PRESS_CONTINUE, KEY_TK6);
1011   5      #if USE_MY_DEBUG
                                  printf("K6 hold\n");
              #endif
1014   5                      }
1015   4                  }
1016   3      
1017   3                  // display_data ^= 0x0800; // 对应的LED状态取反，后面会调用led_display()刷新
1018   3                  // led_display();          // LED状态更新显示
1019   3              }
1020   2          }
1021   1          else if (1 == long_touch_flag && 0 == KeyOnOutput)
1022   1          {
1023   2              // 如果之前是长按，现在却松开了按键
1024   2              switch (KeyOld)
1025   2              {
1026   3              case TK_CH24_VALIB:
1027   3                  send_status_keyval(KEY_PRESS_LOOSE, KEY_TK1);
1028   3      #if USE_MY_DEBUG
                          printf("K1 loose\n");
              #endif
1031   3                  break;
1032   3      
1033   3              case TK_CH3_VALIB:
1034   3                  send_status_keyval(KEY_PRESS_LOOSE, KEY_TK2);
1035   3      #if USE_MY_DEBUG
                          printf("K2 loose\n");
              #endif
1038   3                  break;
1039   3      
1040   3              case TK_CH2_VALIB:
C51 COMPILER V9.60.7.0   TK_USER                                                           07/08/2025 17:28:58 PAGE 18  

1041   3                  send_status_keyval(KEY_PRESS_LOOSE, KEY_TK3);
1042   3      #if USE_MY_DEBUG
                          printf("K3 loose\n");
              #endif
1045   3                  break;
1046   3      
1047   3              case TK_CH0_VALIB:
1048   3                  send_status_keyval(KEY_PRESS_LOOSE, KEY_TK4);
1049   3      #if USE_MY_DEBUG
                          printf("K4 loose\n");
              #endif
1052   3                  break;
1053   3      
1054   3              case TK_CH9_VALIB:
1055   3                  send_status_keyval(KEY_PRESS_LOOSE, KEY_TK5);
1056   3      #if USE_MY_DEBUG
                          printf("K5 loose\n");
              #endif
1059   3                  break;
1060   3      
1061   3              case TK_CH10_VALIB:
1062   3                  send_status_keyval(KEY_PRESS_LOOSE, KEY_TK6);
1063   3      #if USE_MY_DEBUG
                          printf("K6 loose\n");
              #endif
1066   3                  break;
1067   3              }
1068   2      
1069   2              long_touch_flag = 0; // 清除标志位
1070   2              cnt = 0;
1071   2              KeyOld = 0;
1072   2          }
1073   1      
1074   1      #if 0
                  if (1 == __tk_long_key_flag) // 如果长按按键（这个功能测试发现不行，不能用）
                  {
                      __tk_long_key_flag = 0;
              
                      // 这里可以自己处理，添加自己需要的功能
              
                      P11 = 0;
                  }
              #endif
1084   1      
1085   1          // led_display(); // LED状态更新显示
1086   1      }
1087          #endif // end of #ifdef CIRCUIT_BOARD
1088          /*************************** (C) COPYRIGHT 2022 TAIXIN-IC ***** END OF FILE *****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1600    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
